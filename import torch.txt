import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np

# Define a transformation (to Tensor and Normalize)
transform = transforms.Compose([
    transforms.ToTensor(),  # Converts image to Tensor (normalized from [0, 255] to [0, 1])
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))  # Normalize between -1 and 1
])

# Load the training and test datasets
trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

# Load the data into DataLoader (this helps in batching, shuffling, and parallelizing)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True)
testloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False)

# Classes of CIFAR-10 dataset
classes = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Function to display images
def imshow(img):
    # Unnormalize the image from [-1, 1] back to [0, 1] for display
    img = img / 2 + 0.5  # Reversing the normalization
    npimg = img.numpy()  # Convert tensor to numpy array for visualization
    plt.imshow(np.transpose(npimg, (1, 2, 0)))  # Rearrange dimensions (C, H, W) to (H, W, C)
    plt.show()

# Get a batch of training data
dataiter = iter(trainloader)
images, labels = next(dataiter)

# Show images in a grid
imshow(torchvision.utils.make_grid(images))

# Print the class labels for the images
print('Labels:', ' '.join(f'{classes[labels[j]]}' for j in range(4)))
